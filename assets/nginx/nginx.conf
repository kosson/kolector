worker_processes 4;

events {
    worker_connections  1024;
}

http {
    log_format custom '$remote_addr - $remote_user [$time_local]'
                    '"$request" $status $body_bytes_sent'
                    '"$http_referer" "$http_user_agent"'
                    '"$request_time" "$upstream_connect_time"';
    default_type  application/octet-stream;
    include       /etc/nginx/mime.types;

    access_log  /var/log/nginx/access.log custom;
    error_log   /var/log/nginx/error.log;

    # Permite setarea unui server care ascultă pe un anumit port și face forward mai departe
    upstream nodeapp {
        server localhost:8080;
    }

    # setup proxy cache so we can use it in the below server
    proxy_cache_path /tmp/nginx levels=1:2 keys_zone=my_cache:10m inactive=60m;
    proxy_cache_key "$scheme$request_method$host$request_uri";

    server {
        listen 80 default;
        client_max_body_size 1G;

        # Configurarea pentru containerul server de Node
        location / {
            proxy_pass         http://nodeapp;
            # proxy_cache        my_cache;
            # proxy_cache_bypass $http_cache_control;
            # add_header         X-Proxy-Cache $upstream_cache_status;
            # proxy_redirect     off;
            # proxy_set_header   Host $host;
            # proxy_set_header   X-Real-IP $remote_addr;
            # proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
            # proxy_set_header   X-Forwarded-Host $server_name;
            # We can proxy to some other service or serve some static files here
            # https://enable-cors.org/server_nginx.html
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
                #
                # Custom headers and headers various browsers *should* be OK with but aren't
                #
                add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
                #
                # Tell client that this pre-flight info is valid for 20 days
                #
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }
            if ($request_method = 'POST') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
                add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
                add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';
            }
            if ($request_method = 'GET') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
                add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
                add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';
            }
        }

        location /kibana {            
            # 1. Client requests http://localhost/kibana/* --> 
            # 2. NGINX matches "location /kibana" --> Vezi setarea `server.basePath` din ./assets/kibana/kibana.yml
            # 3. Proxy to kibana service @ http://kolector_kibana:5601/kibana/* -->
            # 4. Kibana fetches resource and sends back resources to NGINX -->
            # 5. NGINX sends resources back to Client
            set $upstream   http://kibana:5601;
            proxy_pass      $upstream;
            proxy_redirect  off;
            proxy_buffering off;

            proxy_http_version 1.1;
            proxy_pass_header  Authorization;
            proxy_set_header   Connection "Keep-Alive";
            proxy_set_header   Proxy-Connection "Keep-Alive";
        }

        # location /api/ {
        #     proxy_pass_header       Server;
        #     proxy_set_header        X-Real-IP $remote_addr;
        #     proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
        #     proxy_set_header        X-Scheme $scheme;
        #     proxy_set_header        Host $http_host;
        #     proxy_set_header        X-NginX-Proxy true;
        #     proxy_connect_timeout   5;
        #     proxy_read_timeout      240;
        #     proxy_intercept_errors  on;

        #     proxy_pass              http://localhost:3000/;
        # }
    }
}
    



    # server {
    #     listen 443 ssl http2;
    #     listen [::]:443 ssl http2;

    #     ssl_certificate /etc/letsencrypt/live/<some-domain>/fullchain.pem;
    #     ssl_certificate_key /etc/letsencrypt/live/<some-domain>/privkey.pem;
    #     include /etc/letsencrypt/options-ssl-nginx.conf;
    #     ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

    #     expires $expires;

    #     root /var/www/html;

    #     index index.html index.htm index.nginx-debian.html;

    #     server_name <some-domain>;

    #     location / {
    #         try_files $uri $uri/ /index.html;
    #     }

    #     location /api/ {
    #         proxy_pass_header       Server;
    #         proxy_set_header        X-Real-IP $remote_addr;
    #         proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
    #         proxy_set_header        X-Scheme $scheme;
    #         proxy_set_header        Host $http_host;
    #         proxy_set_header        X-NginX-Proxy true;
    #         proxy_connect_timeout   5;
    #         proxy_read_timeout      240;
    #         proxy_intercept_errors  on;

    #         proxy_pass              http://localhost:3000/;
    #     }

    #     location /blog/ {
    #         proxy_pass_header       Server;
    #         proxy_set_header        X-Real-IP $remote_addr;
    #         proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
    #         proxy_set_header        X-Scheme $scheme;
    #         proxy_set_header        Host $http_host;
    #         proxy_set_header        X-NginX-Proxy true;
    #         proxy_connect_timeout   5;
    #         proxy_read_timeout      240;
    #         proxy_intercept_errors  on;
    #         proxy_redirect          off;

    #         proxy_pass              http://localhost:8000/;
    #     }
    # }