version: '3.9'
services:
    redis:
        image: redis:latest
        container_name: redis-repo
        volumes:
            - redisdata:/data:rw
        ports:
            - "6379:6379"
        environment:
            - REDIS_REPLICATION_MODE=master
        healthcheck:
            test: redis-cli ping
            interval: 1s
            timeout: 3s
            retries: 30
        networks: 
            dockernet:    
    es01:
        build:
            context: ./assets/elasticsearch/
            args:
              ELK_VERSION: ${ELK_VERSION:-7.17.7}
        container_name: es01
        volumes:
            - type: bind
              source: ./assets/elasticsearch/elasticsearch.yml
              target: /usr/share/elasticsearch/config/elasticsearch.yml
              read_only: true
            - ${ELASTICSEARCH_DATA:-/assets/elasticsearch}/es01:/usr/share/elasticsearch/data
            - data01:/usr/share/elasticsearch/data
        environment:
            - node.name=es01
            - cluster.name=es-docker-cluster
            - discovery.seed_hosts=es02
            - cluster.initial_master_nodes=es01,es02
            - bootstrap.memory_lock=true
            - "ES_JAVA_OPTS=-Xms${ES_HEAP_SIZE:-2g} -Xmx${ES_HEAP_SIZE:-2g}"
        ports:
            # HOST:CONTAINER
            - "9200:9200"
            - "9300:9300"
        ulimits:
            memlock:
                soft: -1
                hard: -1
        healthcheck:
            test: curl --silent --fail -X GET "localhost:9200/_cluster/health?wait_for_status=green&timeout=1s" || exit 1
            interval: 30s
            timeout: 30s
            retries: 3
        networks: 
            dockernet:
    es02:
        build:
            context: ./assets/elasticsearch/
            args:
              ELK_VERSION: ${ELK_VERSION:-7.17.7}
        container_name: es02
        volumes:
            - type: bind
              source: ./assets/elasticsearch/elasticsearch.yml
              target: /usr/share/elasticsearch/config/elasticsearch.yml
              read_only: true
            - ${ELASTICSEARCH_DATA:-/assets/elasticsearch}/es02:/usr/share/elasticsearch/data
            - data02:/usr/share/elasticsearch/data
        environment:
            - node.name=es02
            - cluster.name=es-docker-cluster
            - discovery.seed_hosts=es01
            - cluster.initial_master_nodes=es01,es02
            - bootstrap.memory_lock=true
            - "ES_JAVA_OPTS=-Xms${ES_HEAP_SIZE:-2g} -Xmx${ES_HEAP_SIZE:-2g}"
        ports:
            - "9201:9200"
            - "9301:9300"
        ulimits:
            memlock:
                soft: -1
                hard: -1
        healthcheck:
            test: curl --silent --fail -X GET "localhost:9200/_cluster/health?wait_for_status=green&timeout=1s" || exit 1
            interval: 30s
            timeout: 30s
            retries: 3
        networks: 
            dockernet:
    kibana:
        build:
            context: ./assets/kibana/
            args:
              ELK_VERSION: ${ELK_VERSION:-7.17.7}
        container_name: kibana
        volumes:
            - type: bind 
              source: ./assets/kibana/kibana.yml 
              target: /usr/share/kibana/config/kibana.yml
              read_only: true
        ports:
            - "5601:5601"
        healthcheck:
            test: curl --silent --fail http://0.0.0.0:5601/login
            retries: 6
        depends_on: 
            - es01
            - es02
        networks: 
            dockernet:
    mongo:
        image: mongo:4.4.5-bionic
        container_name: mongo
        env_file: 
            - ./.env
        environment:
            - PUID=1000
            - PGID=1000
            - MONGO_INITDB_ROOT_USERNAME=${MONGO_USER}
            - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWD}
            - MONGO_INITDB_DATABASE=${MONGO_DB}
        volumes:
            - mongodata:/data/db
        command: [--auth]
        ports:
            - "27017:27017"
        healthcheck:
            test: echo 'db.runCommand("ping").ok' | mongo localhost:27017/test --quiet
        networks: 
            dockernet:
    nginx:
        # build:
        #     context: ./assets/nginx/
        #     dockerfile: Dockerfile
        image: nginx:stable-alpine
        container_name: nginx
        restart: always
        ports:
            - "80:80"
            # - "443:443"
        volumes:
            - ./assets/nginx/logs:/var/log/nginx
            - ./assets/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
            - /var/log/nginx/log
        # command: ['nginx', '-g', 'daemon off;']
        healthcheck:
            test: curl --fail -s http://127.0.0.1:3000 || exit 1
            interval: 30s
            timeout: 10s
            retries: 3
        networks: 
            dockernet:
        # depends_on:
        #     nodeapp:
        #         condition: service_healthy    
    nodeapp:
        build:
            context: .
            dockerfile: Dockerfile
            target: prod
            args:
                FRONT_END_PORT: 8080
        image: "kolector:${APP_VER}"
        container_name: kolector_production
        # working_dir: /redcolector
        stdin_open: true
        env_file: 
            - ./.env
        volumes:
            - ./repo:/usr/src/kolector/repo
            - ./:/usr/src/kolector
            - /usr/src/kolector/node_modules
        ports:
            - "8080:8080"
        restart: always
        command: ["dumb-init", "node", "app.js"]
        healthcheck:
            test: curl --silent --fail localhost:8080 || exit 1
            interval: 10s
            timeout: 30s
            retries: 3
        depends_on:
            mongo:
                condition: service_healthy
            redis:
                condition: service_healthy
            es01:
                condition: service_healthy
        networks: 
            dockernet:
volumes:
    redisdata:
    mongodata:
    # kibana_data:
    data01:
        driver: local
    data02:
        driver: local

networks:
    dockernet:
        driver: bridge