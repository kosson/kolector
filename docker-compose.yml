services:
  mongo:
    image: 'mongo:4.4.5-bionic'
    container_name: arachnide_mongo
    env_file:
      - ./.env
    environment:
      - PUID=1000
      - PGID=1000
      - 'MONGO_INITDB_ROOT_USERNAME=${MONGO_USER}'
      - 'MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWD}'
      - 'MONGO_INITDB_DATABASE=${MONGO_DB}'
    volumes:
      - './assets/mongodb/data:/data/db'
    command:
      - '--auth'
    ports:
      - '27017:27017'
    healthcheck:
      test: 'echo ''db.runCommand("ping").ok'' | mongo localhost:27017/test --quiet'
    networks:
      dockernet: null
  nodeapp:
    build:
      context: .
      dockerfile: Dockerfile
      target: devel
      args:
        FRONT_END_PORT: 8080
    image: 'arachnide_devel:${APP_VER:-0.1.0}'
    container_name: arachnide_devel
    stdin_open: true
    env_file:
      - ./.env
    volumes:
      - './repo:/arachnide/repo'
      - './:/arachnide'
      - /arachnide/node_modules
    ports:
      - '8080:8080'
    restart: always
    command: npm run dev
    healthcheck:
      test: 'curl --silent --fail localhost:8080 || exit 1'
      interval: 10s
      timeout: 30s
      retries: 3
    depends_on:
      - mongo
    networks:
      dockernet: null
  nginx:
    build:
      context: ./assets/nginx/
    container_name: arachnide_nginx
    restart: always
    # este portul 80 pentru că aplicația având modul de rulare virtualizat, va folosi acest port; 8080 e pentru dezvoltare
    ports:
      - 80:8080
      - 443:443
    volumes:
      - './assets/nginx/logs:/var/log/nginx'
      # - './assets/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro'
      - './assets/nginx/nginx.conf:/etc/nginx/nginx.conf'
      - /var/log/nginx/log
    healthcheck:
      test: 'curl --fail -s http://127.0.0.1:80 || exit 1'
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      dockernet: null
    depends_on:
      - nodeapp
volumes:
  mongodata:
    driver: local
networks:
  dockernet:
    driver: bridge
