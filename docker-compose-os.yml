version: "3"

services:

  os01:
    image: opensearchproject/opensearch:${OPEN_SEARCH_VERSION}
    container_name: kolector-os-os01
    volumes:
      # - ./assets/opensearch/certs:/usr/share/elasticsearch/config/certs
      # - certs:/usr/share/elasticsearch/config/certs
      - osdata01:/usr/share/opensearch/data
    ports:
      - ${ES_PORT}:9200
      - 9600:9600
    environment:
      - node.name=os01
      - cluster.name=${OS_CLUSTER_NAME}
      - cluster.initial_master_nodes=os01,os02,os03
      - discovery.seed_hosts=os02,os03
      - bootstrap.memory_lock=true
      - "OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536 # maximum number of open files for the OpenSearch user, set to at least 65536 on modern systems
        hard: 65536
    networks:
      - osearch

  os02:
    depends_on:
      - os01
    image: opensearchproject/opensearch:${OPEN_SEARCH_VERSION}
    container_name: kolector-os-os02
    volumes:
      # - ./assets/elasticsearch/certs:/usr/share/elasticsearch/config/certs
      # - certs:/usr/share/elasticsearch/config/certs
      - osdata02:/usr/share/opensearch/data
    environment:
      - node.name=os02
      - cluster.name=${OS_CLUSTER_NAME}
      - cluster.initial_master_nodes=os01,os02,os03
      - discovery.seed_hosts=os01,os03
      - bootstrap.memory_lock=true
      - "OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    networks:
      - osearch

  os03:
    depends_on:
      - os02
    image: opensearchproject/opensearch:${OPEN_SEARCH_VERSION}
    container_name: kolector-os-os03
    volumes:
      # - ./assets/elasticsearch/certs:/usr/share/elasticsearch/config/certs
      # - certs:/usr/share/elasticsearch/config/certs
      - osdata03:/usr/share/opensearch/data
    environment:
      - node.name=os03
      - cluster.name=${OS_CLUSTER_NAME}
      - cluster.initial_master_nodes=os01,os02,os03
      - discovery.seed_hosts=os01,os02
      - bootstrap.memory_lock=true
      - "OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    networks:
      - osearch

  dashboards:
    image: opensearchproject/opensearch-dashboards:${OPEN_SEARCH_VERSION}
    container_name: kolector-os-dashboards
    volumes:
      - ./assets/elasticsearch/certs:/usr/share/kibana/config/certs
      # - certs:/usr/share/kibana/config/certs
      - dashboardsdata:/usr/share/dashboards/data
    ports:
      - 5601:5601
    environment:
      - SERVERNAME=kibana
      - ELASTICSEARCH_HOSTS=["https://os01:9200","https://os02:9200","https://os03:9200"]
    networks:
      - osearch

  redis:
    image: redis:7.2-bookworm
    restart: unless-stopped
    container_name: kolector-os-redis
    volumes:
      - './assets/redis/redisdata:/root/redis'
      - './assets/redis/config/redis.conf:/usr/local/etc/redis/redis.conf'
      - './assets/redis/config/users.acl:/usr/local/etc/redis/users.acl'
    ports:
      - '6379:6379'
    command: ["redis-server", "/usr/local/etc/redis/redis.conf", "--loglevel", "warning"]
    healthcheck:
      test: redis-cli ping
      interval: 1s
      timeout: 3s
      retries: 30
    networks:
      - dockernet

  mongo:
    image: 'mongo:4.4.5-bionic'
    container_name: kolector-os-mongo
    env_file:
      - ./.env
    environment:
      - PUID=1000
      - PGID=1000
      - 'MONGO_INITDB_ROOT_USERNAME=${MONGO_USER}'
      - 'MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWD}'
      - 'MONGO_INITDB_DATABASE=${MONGO_DB}'
    volumes:
      - './assets/mongodb/data:/data/db'
    command:
      - '--auth'
    ports:
      - '27017:27017'
    healthcheck:
      test: 'echo ''db.runCommand("ping").ok'' | mongo localhost:27017/test --quiet'
    networks:
      - dockernet

  nodeapp:
    build:
      context: .
      dockerfile: Dockerfile
      target: devel
      args:
        FRONT_END_PORT: ${PORT}
    stdin_open: true
    container_name: kolector-os-nodeapp
    env_file:
      - ./.env
    volumes:
      - './:/home/node/kolector'
      # previne suprascrierea/modificarea din containerul Docker a lui node_modules originale
      # - /home/node/kolector/node_modules
      # - /home/node/kolector
    ports:
      - '8081:8081'
      - '9229:9229'
    restart: always
    command: npm run dev
    # https://blog.risingstack.com/how-to-debug-a-node-js-app-in-a-docker-container/
    # https://code.visualstudio.com/docs/containers/debug-node
    # https://code.visualstudio.com/docs/devcontainers/containers
    healthcheck:
      test: 'curl --silent --fail localhost:8081 || exit 1'
      interval: 10s
      timeout: 30s
      retries: 3
    depends_on:
      - mongo
      - redis
      - os01
    networks:
      - dockernet
      - osearch

volumes:
  # certs:
  #   driver: local
  osdata01:
    driver: local
  osdata02:
    driver: local
  osdata03:
    driver: local
  dashboardsdata:
    driver: local

networks:
  dockernet:
    driver: bridge
  osearch:
    driver: bridge